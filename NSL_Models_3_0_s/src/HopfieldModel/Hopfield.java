package HopfieldModel;
//
// Hopfield Network
//
import nslj.main.*;
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 


 public class Hopfield extends NslModel /*()*/ {
    
    private  int MAXSIZE=6;
    private  int MAXSIZE2=MAXSIZE*MAXSIZE;
    private NslInt0 dis ; /*()*/

    public NslDinDouble2 input ; /*(MAXSIZE,MAXSIZE)*/
    public NslDouble1 pattern ; /*(MAXSIZE2)*/
    public NslDouble1 net ; /*(MAXSIZE2)*/
    public NslDouble2 weight ; /*(MAXSIZE2,MAXSIZE2)*/
    public NslDoutDouble0 energy ; /*()*/
    public NslDoutDouble2 output ; /*(MAXSIZE,MAXSIZE)*/

    public HopfieldIn inModule ; /*(MAXSIZE)*/
    public HopfieldOut outModule ; /*(MAXSIZE,MAXSIZE2)*/  

    // Nsl Methods
	
    public  void makeConn() {
	
	nslConnect(inModule.input, this.input);
	nslConnect(this.energy, outModule.energy);
	nslConnect(this.output, outModule.output);
	
    }

    public  void initSys() {
	system.setRunEndTime(150);
	system.setTrainEndTime(1);
    }
    
    public  void initModule() {
    	system.nslSetTrainDelta(1);
	system.nslSetRunDelta(1);

	weight.set(0);
    }
       
    public  void simTrain() {
	System.out.print("Adding new pattern to the net\n");
		
	for( int i=0;i<MAXSIZE; i++) {
	    for( int j=0; j<MAXSIZE; j++) {
		(pattern).set(((i)*(MAXSIZE))+(j),(input).get(i,j));
	    }
	}

	for( int i=0;i<MAXSIZE2; i++) {
	    for( int j=0; j<MAXSIZE2; j++) {
		(weight).set(i,j,((i)==(j))?(0.0):(((weight).get(i,j))+((((pattern).get(i))*((pattern).get(j)))/(MAXSIZE2))));
	    }
	}
    }
	
    public  void initRun() {
    
    	for( int i=0;i<MAXSIZE; i++) {
	    for( int j=0; j<MAXSIZE; j++) {
		(net).set(((i)*(MAXSIZE))+(j),(input).get(i,j));
	    }
	}

	for( int i=0; i<dis.get();) {
	     int r = (int) (Math.random()*MAXSIZE2);
	     double temp; 
	    temp=(-(1))*((net).get(r));
	    if  ((temp)!=((input).get((r)/(MAXSIZE),(r)%(MAXSIZE)))) {
		(net).set(r,temp);
		i++;
	    }
	}
    }
	
    public  void simRun() {
		
	 int i = (int) (Math.random()*MAXSIZE2);
				
	 double sum=0.0;
	for ( int j=0 ; j<MAXSIZE2; j++) {
	    sum=(sum)+(((weight).get(i,j))*((net).get(j)));
	}
		
	(net).set(i,((sum)>=(0))?(1):(-(1)));
		
	for(i=0;i<MAXSIZE; i++) {
	    for( int j=0; j<MAXSIZE; j++) {
		(output).set(i,j,(net).get(((i)*(MAXSIZE))+(j)));
	    }
	}

	sum=0;
	for(i=0;i<MAXSIZE2; i++) {
	    for( int j=0; j<MAXSIZE2; j++) {
		sum=(sum)+((((weight).get(i,j))*((net).get(i)))*((net).get(j)));
	    }
	}
	
	energy.set((-(.5))*(sum));
    }
	
    
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	/* constructor and related methods */
	/* EMPTY CONSTRUCTOR: Called only for the top level module */
	 public Hopfield() {
		super("hopfield",(NslModel)null);
		if (NslMain.TopLoaded) { System.err.println(
		 "ERROR: construction without (name,parent)");
		 System.exit(1);} 
		 NslMain.TopLoaded=true; 
		initSys();
		makeInst("hopfield",null);
	}
	/* nsl declarations */

	 /*GENERIC CONSTRUCTOR:   */
	 public Hopfield(String nslName, NslModule nslParent) {
		super(nslName, nslParent);
		initSys();
		makeInst(nslName, nslParent);
	}
	public void makeInst(String nslName, NslModule nslParent){ 
	 dis=new NslInt0 ("dis",this); //NSLDECLS 
	 input=new NslDinDouble2 ("input",this,MAXSIZE,MAXSIZE); //NSLDECLS 
	 pattern=new NslDouble1 ("pattern",this,MAXSIZE2); //NSLDECLS 
	 net=new NslDouble1 ("net",this,MAXSIZE2); //NSLDECLS 
	 weight=new NslDouble2 ("weight",this,MAXSIZE2,MAXSIZE2); //NSLDECLS 
	 energy=new NslDoutDouble0 ("energy",this); //NSLDECLS 
	 output=new NslDoutDouble2 ("output",this,MAXSIZE,MAXSIZE); //NSLDECLS 
	 inModule=new HopfieldIn ("inModule",this,MAXSIZE); //NSLDECLS 
	 outModule=new HopfieldOut ("outModule",this,MAXSIZE,MAXSIZE2); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
