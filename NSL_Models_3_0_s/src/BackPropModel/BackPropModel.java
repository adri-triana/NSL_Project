package BackPropModel;

/* Copyright 1999 University of Southern California Brain Lab */
/* email nsl@java.usc.edu */
 import nslj.main.*;
 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 


 public class BackPropModel extends NslModel /*()*/ {

     int inSize  = 2;
     int hidSize = 2;
     int outSize = 1;
     int nPats   = 4;
        
    public TrainManager train ; /*(nPats,inSize,outSize)*/
    public BPForward    forward ; /*(inSize,hidSize,outSize)*/
    public BPError      error ; /*(outSize)*/
    public BPUpdate     update ; /*(inSize,hidSize,outSize)*/

    public TrainManager input ; /*(inSize, outSize)*/ // Added AW Aug 2015
    public BPDisplayResult result ; /*(inSize, outSize)*/

    public NslDoutFloat2 wh ; /*(inSize, hidSize)*/
    public NslDoutFloat1 hh ; /*(hidSize)*/

    public NslDoutFloat2 wo ; /*(hidSize, outSize)*/
    public NslDoutFloat1 ho ; /*(outSize)*/

      
    public BackPropModel() {
		super("BackPropModel",(NslModel)null);
		if (NslMain.TopLoaded) { System.err.println("ERROR in construction without (name,parent)");
		 System.exit(1);} 
		 NslMain.TopLoaded=true; 
		initSys();
		makeInst("backPropModel",null);
    }
    /*
    public BackPropModel(String name, NslModule parent) {
        super(name, parent);
    }
    */
    public BackPropModel(String nslName, NslModule nslParent) {
		super(nslName, nslParent);
		initSys();
		makeInst(nslName, nslParent);
    }
    public void makeInst(String nslName, NslModule nslParent){ 
	 train=new TrainManager ("train",this,nPats,inSize,outSize); //NSLDECLS 
	 forward=new BPForward ("forward",this,inSize,hidSize,outSize); //NSLDECLS 
	 error=new BPError ("error",this,outSize); //NSLDECLS 
	 update=new BPUpdate ("update",this,inSize,hidSize,outSize); //NSLDECLS 
	 result=new BPDisplayResult ("result",this,inSize,outSize); //NSLDECLS 
	 wh=new NslDoutFloat2 ("wh",this,inSize,hidSize); //NSLDECLS 
	 hh=new NslDoutFloat1 ("hh",this,hidSize); //NSLDECLS 
	 wo=new NslDoutFloat2 ("wo",this,hidSize,outSize); //NSLDECLS 
	 ho=new NslDoutFloat1 ("ho",this,outSize); //NSLDECLS 
    }
        
    public  void initSys() {
    	system.setNumTrainEpochs(1000);
	system.setTrainEndTime(nPats);
	system.setRunEndTime(1);
    }

    public  void initModule() {
	system.nslSetTrainDelta(1);     
	system.nslSetRunDelta(1);
    }

    public  void initTrainEpoch() {
        wh.set(NslRandom.eval(wh,(float)(-(0.5)),(float)(0.5))) /* rule 108 */;
        hh.set(NslRandom.eval(hh,(float)(-(0.5)),(float)(0.5))) /* rule 108 */;

        wo.set(NslRandom.eval(wo,(float)(-(0.5)),(float)(0.5))) /* rule 108 */;
        ho.set(NslRandom.eval(ho,(float)(-(0.5)),(float)(0.5))) /* rule 108 */;
    }   
     
    public  void makeConn() {
	nslConnect(train.p,forward.p);
	nslConnect(train.t,error.t);

        nslConnect(this.wh, forward.wh);
        nslConnect(this.hh, forward.hh);
        nslConnect(this.wo, forward.wo);
        nslConnect(this.ho, forward.ho);

	nslConnect(forward.yo, error.yo);
	nslConnect(error.err,  update.deltaOut);
	nslConnect(forward.yh, update.yh);
	nslConnect(forward.p,  update.p);

        nslConnect(this.wh, update.wh);
        nslConnect(this.hh, update.hh);
        nslConnect(this.wo, update.wo);
        nslConnect(this.ho, update.ho);

        nslConnect(this.wh, update.whi);
        nslConnect(this.hh, update.hhi);
        nslConnect(this.wo, update.woi);
        nslConnect(this.ho, update.hoi);
    }
	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}


	/* end of automatic declaration statements */
}
