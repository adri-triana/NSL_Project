package BackPropModel;

/* Copyright 1999 University of Southern California Brain Lab */
/* email nsl@java.usc.edu */

 import nslj.src.system.*; 
 import nslj.src.cmd.*; 
 import nslj.src.lang.*; 
 import nslj.src.math.*; 
 import nslj.src.display.*; 

 public class BPUpdate extends NslModule /*(int inSize, int hidSize, int outSize)*/ {

    public NslDinFloat1 deltaOut ; /*(outSize)*/
    public NslDinFloat1 p ; /*(inSize)*/
    public NslDinFloat1 yh ; /*(hidSize)*/

    private NslFloat1 deltaHid ; /*(hidSize)*/     
    private NslFloat0 lrate ; /*()*/

    public NslDinFloat2 whi ; /*(inSize, hidSize)*/
    public NslDinFloat1 hhi ; /*(hidSize)*/

    public NslDinFloat2 woi ; /*(hidSize, outSize)*/
    public NslDinFloat1 hoi ; /*(outSize)*/

    public NslDinFloat2 wh ; /*(inSize, hidSize)*/
    public NslDinFloat1 hh ; /*(hidSize)*/

    public NslDoutFloat2 wo ; /*(hidSize, outSize)*/
    public NslDoutFloat1 ho ; /*(outSize)*/

    public  void backward() {	
	deltaHid.set(NslElemMult.eval(
 __nsltmp102=nslj.src.math.NslElemMult.eval(__nsltmp102,yh.get(),
 __nsltmp101=nslj.src.math.NslSub.eval(__nsltmp101,(float)(1.0),yh.get())),NslProd.eval(deltaOut,NslTrans.eval(woi)))) /* rule 108 */;
	ho.set(
 __nsltmp104=nslj.src.math.NslSub.eval(__nsltmp104,hoi.get(),
 __nsltmp103=nslj.src.math.NslElemMult.eval(__nsltmp103,lrate.get(),deltaOut.get()))); 
        wo.set(
 __nsltmp106=nslj.src.math.NslSub.eval(__nsltmp106,woi.get(),NslProd.eval(NslTrans.eval(yh),
 __nsltmp105=nslj.src.math.NslElemMult.eval(__nsltmp105,lrate.get(),deltaOut.get())))); 
	hh.set(
 __nsltmp108=nslj.src.math.NslSub.eval(__nsltmp108,hhi.get(),
 __nsltmp107=nslj.src.math.NslElemMult.eval(__nsltmp107,lrate.get(),deltaHid.get()))); 
        wh.set(
 __nsltmp109=nslj.src.math.NslSub.eval(__nsltmp109,whi.get(),NslProd.eval(NslTrans.eval(p),NslElemMult.eval(lrate,deltaHid)))); 
    }

    public  void simTrain() {
        backward ();
    }

	/* nslInitTempModule inserted by NPP */
public void nslInitTempModule() {
	/* Instantiation statements generated by NslPreProcessor */
	/* temporary variables */
	__nsltmp101 = new float[1];
	__nsltmp102 = new float[1];
	__nsltmp103 = new float[1];
	__nsltmp104 = new float[1];
	__nsltmp105 = new float[1];
	__nsltmp106 = new float[1][1];
	__nsltmp107 = new float[1];
	__nsltmp108 = new float[1];
	__nsltmp109 = new float[1][1];
	/* end of automatic instantiation statements */
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	for (int i = 0; i < __nsltmp101.length; i++) {
		__nsltmp101[i] = 0;
}
	for (int i = 0; i < __nsltmp102.length; i++) {
		__nsltmp102[i] = 0;
}
	for (int i = 0; i < __nsltmp103.length; i++) {
		__nsltmp103[i] = 0;
}
	for (int i = 0; i < __nsltmp104.length; i++) {
		__nsltmp104[i] = 0;
}
	for (int i = 0; i < __nsltmp105.length; i++) {
		__nsltmp105[i] = 0;
}
	for (int i = 0; i < __nsltmp106.length; i++) {
		for (int j = 0; j < __nsltmp106[0].length; j++) {
			__nsltmp106[i][j] = 0;
		}
	}
	for (int i = 0; i < __nsltmp107.length; i++) {
		__nsltmp107[i] = 0;
}
	for (int i = 0; i < __nsltmp108.length; i++) {
		__nsltmp108[i] = 0;
}
	for (int i = 0; i < __nsltmp109.length; i++) {
		for (int j = 0; j < __nsltmp109[0].length; j++) {
			__nsltmp109[i][j] = 0;
		}
	}
	/* end of automatic intialisation statements */
}

	/* nslInitTempRun inserted by NPP */
public void nslInitTempRun() {
	/* Intialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* nslInitTempTrain inserted by NPP */
public void nslInitTempTrain() {
	/* Initialisation statements generated by NslPreProcessor */
	/* temporary variables */
	/* end of automatic intialisation statements */
}

	/* Declaration statements generated by NslPreProcessor */
	/* makeinst() declared variables */
	/* temporary variables */
	private  float[] __nsltmp101;
	private  float[] __nsltmp102;
	private  float[] __nsltmp103;
	private  float[] __nsltmp104;
	private  float[] __nsltmp105;
	private  float[][] __nsltmp106;
	private  float[] __nsltmp107;
	private  float[] __nsltmp108;
	private  float[][] __nsltmp109;
	/* constructor and related methods */
	/* nsl declarations */
	int inSize;
	int hidSize;
	int outSize;

	 /*GENERIC CONSTRUCTOR:   */
	 public BPUpdate(String nslName, NslModule nslParent,int inSize, int hidSize, int outSize) {
		super(nslName, nslParent);
		this.inSize = inSize;
		this.hidSize = hidSize;
		this.outSize = outSize;
		initSys();
		makeInst(nslName, nslParent,inSize, hidSize, outSize);
	}
	public void makeInst(String nslName, NslModule nslParent,int inSize,int hidSize,int outSize){ 
	 deltaOut=new NslDinFloat1 ("deltaOut",this,outSize); //NSLDECLS 
	 p=new NslDinFloat1 ("p",this,inSize); //NSLDECLS 
	 yh=new NslDinFloat1 ("yh",this,hidSize); //NSLDECLS 
	 deltaHid=new NslFloat1 ("deltaHid",this,hidSize); //NSLDECLS 
	 lrate=new NslFloat0 ("lrate",this); //NSLDECLS 
	 whi=new NslDinFloat2 ("whi",this,inSize,hidSize); //NSLDECLS 
	 hhi=new NslDinFloat1 ("hhi",this,hidSize); //NSLDECLS 
	 woi=new NslDinFloat2 ("woi",this,hidSize,outSize); //NSLDECLS 
	 hoi=new NslDinFloat1 ("hoi",this,outSize); //NSLDECLS 
	 wh=new NslDinFloat2 ("wh",this,inSize,hidSize); //NSLDECLS 
	 hh=new NslDinFloat1 ("hh",this,hidSize); //NSLDECLS 
	 wo=new NslDoutFloat2 ("wo",this,hidSize,outSize); //NSLDECLS 
	 ho=new NslDoutFloat1 ("ho",this,outSize); //NSLDECLS 
	}
	/* end of automatic declaration statements */
}
